#!/usr/bin/env ruby

require 'json'
require 'tempfile'
require 'ipaddr'

def subnet_size(ipaddr)
  range = ipaddr.to_range
  Math.log2((range.last.to_i - range.first.to_i + 1))
end

class Configuration
  def initialize(config_file)
    begin
      json = JSON.load(File.open(config_file))
    rescue => e
      abort "Failed to load configuration: #{e}"
    end
    abort "configuration is empty" if json.nil? or json == ""
    data = json["nsupdate"] or abort "no 'nsupdate' object found in configuration"
    abort "'nsupdate' should be an object" unless data.is_a? Hash
    @name_server   = assert_type(data, "name_server", String) or
      abort "no 'name_server' specified in configuration"
    @private_key           = assert_type(data, "private_key", String)
    @public_zones          = assert_type(data, "public_zones", Array) || []
    @private_zones         = assert_type(data, "private_zones", Array) || []
    @public_search_domain  = assert_type(data, "public_search_domain", String)
    @private_search_domain = assert_type(data, "private_search_domain", String)
    reverse_zones          = assert_type(data, "reverse_zones", Hash) || {}
    @nsupdate_executable   = assert_type(data, "nsupdate_executable", String)

    @reverse_zones = {}
    reverse_zones.each do |subnet, zone|
      @reverse_zones[IPAddr.new(subnet)] = zone
    end
    @reverse_zones.sort_by { |subnet, zone| subnet_size(subnet) }
  end

  def assert_type(data, key, type)
    val = data[key]
    unless val.nil? or val.is_a?(type)
      abort "key '#{key}' should be an #{type.to_s.downcase}"
    end
    val
  end
  attr_reader :name_server,
    :private_key,
    :nsupdate_executable,
    :private_zones,
    :public_zones,
    :private_search_domain,
    :public_search_domain,
    :reverse_zones
end

class Nsupdate
  def initialize(config)
    @config = config
  end

  def remove_record(private_ip, public_ip, common_name)
    change_record(private_ip, public_ip, common_name, false)
  end

  def add_record(private_ip, public_ip, common_name)
    change_record(private_ip, public_ip, common_name, true)
  end

  private

  def reverse_name(common_name, search_domain)
      if common_name =~ /[^.]+/
        # if common_name is a hostname append the search domain
        "#{common_name}.#{search_domain}"
      else
        common_name
      end
  end

  def change_record(private_ip, public_ip, common_name, add)
    transaction = []

    transaction += forward_entry(private_ip,
                                 common_name,
                                 @config.private_zones,
                                 @config.private_search_domain,
                                 add)
    name = reverse_name(common_name, @config.private_search_domain)
    transaction += reverse_entry(private_ip, name, add)

    if public_ip
      transaction += forward_entry(public_ip,
                                   common_name,
                                   @config.public_zones,
                                   @config.public_search_domain,
                                   add)
      name = reverse_name(common_name, @config.public_search_domain)
      transaction += reverse_entry(public_ip, name, add)
    end

    private_key = if @config.private_key
                    ["key #{@config.private_key}"]
                  else
                    []
                  end

    return if transaction.empty?

    nsupdate(
      ["server #{@config.name_server}"] +
      private_key +
      transaction +
      ["quit"]
    )
  end

  def forward_entry(ip, common_name, zones, search_domain, add)
    transaction = []

    zone, domain = find_zone(common_name, zones, search_domain)

    unless zone.nil?
      transaction << "zone #{zone}"
      transaction << "update delete #{domain}. #{rtype(ip)}"
      if add
        transaction << "update add #{domain}. 3600 #{rtype(ip)} #{ip.to_string}"
      end
      transaction << "send"
    end
    transaction
  end

  def reverse_entry(ip, common_name, add)
    transaction = []

    subnet_size, reverse_zone = find_reverse_zone(ip)
    unless reverse_zone.nil?
      transaction << "zone #{reverse_zone}"
      host_part = if ip.ipv4?
        (subnet_size / 8).ceil
      else
        (subnet_size / 4).ceil
      end
      host_digits = [host_part, 1].max
      host_part = ip.reverse[/^([0-9a-fA-F]+\.){#{host_digets}}/]

      transaction << "update delete #{host_part}#{reverse_zone}. PTR"

      if add
        transaction << "update add #{host_part}#{reverse_zone}. 3600 PTR #{common_name}"
      end
      transaction << "send"
    end
    transaction
  end

  def find_reverse_zone(ip)
    @config.reverse_zones.each do |subnet, zone|
      return [subnet_size(subnet), zone] if subnet.include?(ip)
    end
    [nil, nil]
  end

  def find_zone(name, zones, search_domain)
    name = normalize(name)
    zones.each do |zone|
      zone = normalize(zone)
      if name.end_with?(zone)
        return zone, name
      end
    end
    unless search_domain.nil?
      zone = normalize(search_domain)
      hostpart = name[/^[^.]+/]
      return zone, "#{hostpart}.#{zone}"
    end
    nil
  end

  def normalize(s)
    # remove leading/trailing dots
    # remove characters not allowed in fqdn
    s.gsub(/^\.|\.$|[^a-zA-Z0-9\-.]+/, "")
  end

  def rtype(ip)
    if ip.ipv6?
      "AAAA"
    else
      "A"
    end
  end

  def nsupdate(zone)
    cmd = [@config.nsupdate_executable || "nsupdate"]
    puts("$ #{cmd.join(" ")} <<'EOF'")
    puts(zone.join("\n"))
    puts("'EOF'")
    IO.popen(cmd, "r+") do |io|
      io.write(zone.join("\n"))
      io.close_write
      puts(io.read)
    end
  end
end

def find_config
  script_dir = File.dirname(__FILE__)

  lookup_paths = [
    "openvpn-ddns.json",
    File.join(script_dir, "openvpn-ddns.json"),
    "/etc/openvpn/openvpn-ddns.json",
    "/usr/local/etc/openvpn/openvpn-ddns.json"
  ]

  openvpn_config = ENV["config"]
  if openvpn_config
    basename = File.basename(openvpn_config)
    stripped = basename.gsub(/\.(ovpn|config)/, "")
    config_name = "#{stripped}.openvpn-ddns.json"
    lookup_paths = [
      config_name,
      File.join(script_dir, config_name),
      File.join("/etc/openvpn/", config_name),
      File.join("/usr/local/etc/openvpn/", config_name)
    ] + lookup_paths
  end

  lookup_paths.map! {|p| File.expand_path(p) }

  lookup_paths.each do |path|
    return path if File.exists?(path)
  end

  abort "configuration not found, tried the following paths:\n#{lookup_paths.join("\n")}"
end

def main
  config_file = find_config
  config = Configuration.new(config_file)

  if ARGV.size < 3
    abort "USAGE: #{$0} (add|update|delete) ADDRESS CN"
  end

  operation, address, cn = ARGV
  begin
    private_ip = IPAddr.new(address).native
  rescue IPAddr::InvalidAddressError => e
    abort "error parsing address '#{address}': #{e}"
  end
  public_ip = ENV["trusted_ip"] || ENV["trusted_ip6"]
  if public_ip
    public_ip = IPAddr.new(public_ip).native
  end

  nsupdate = Nsupdate.new(config)
  case operation
  when "add", "update"
    nsupdate.add_record(private_ip, public_ip, cn)
  when "delete"
    nsupdate.remove_record(private_ip, public_ip, cn)
  else
    abort "unknown operation #{operation}"
  end
rescue SystemExit
  # abort was called, no need for logging
rescue Exception => e
  # log exception without exit != 0
  puts "#{e.class}: #{e}"
  print e.backtrace.join("\n")
ensure
  exit 0
end

main
